; TERMS
; Copyright (c) 2017
; Mikhail Baynov m.baynov@gmail.com
;
; Official macro set
; Revision  20171023
; Signature 39b323a8a4fbc711abd0ebb073eaceeb59744b80920bf26767139366633ba796





>> CALLER CALLER
>> REVENUE CALLVALUE
>> STACKCOPY DUP1
>> RECORD SLOAD
>> BLOCKNUMBER NUMBER
>> CONTRACT ADDRESS
>> BALANCE BALANCE
>> ORIGIN ORIGIN
>> CALLDATASIZE CALLDATASIZE
>> GASPRICE GASPRICE
>> COINBASE COINBASE
>> TIMESTAMP TIMESTAMP
>> DIFFICULTY DIFFICULTY
>> GASLIMIT GASLIMIT
>> PC PC
>> MSIZE MSIZE
>> GAS GAS
>> GASLIMIT GASLIMIT



## conditions
INIT

## payable fallback
FALLBACK ()

## write ^1 to record ^2
PUSH* ^1
PUSH ^2
SSTORE

## write record ^1
PUSH* ^1
PUSH ^1
SSTORE

## let ^1 get argument 1
PUSH 0x04
CALLDATALOAD
PUSH ^1
MSTORE

## let ^1 get argument 2
PUSH 0x24
CALLDATALOAD
PUSH ^1
MSTORE

## let ^1 get argument 3
PUSH 0x44
CALLDATALOAD
PUSH ^1
MSTORE

## let ^1 get argument ^2
PUSH 0x1C
PUSH 0x20
PUSH ^2
MUL
SUB
CALLDATALOAD
PUSH ^1
MSTORE

## jumpdest ^1
JUMPDEST ^1

## constant ^1
JUMPDEST ^1

## reference ^1
JUMPDEST ^1

## see ^1
JUMP ^1

## see reference ^1
REFJUMP ^1

## continue
BACKJUMP

## return
STOP

## stop
STOP

## suicide
CALLER
SUICIDE

## if zero , see ^1
ISZERO
JUMPI ^1

## grab record ^1
PUSH ^1
DUP1
SLOAD
SWAP1
MSTORE

## if ^1 is zero , see ^2
PUSH* ^1
ISZERO
JUMPI ^2

## if ^1 is not zero , see ^2
PUSH* ^1
JUMPI ^2

## if ^1 <= ^2 , see ^3
PUSH* ^2
PUSH* ^1
GT
ISZERO
JUMPI ^3

## if ^1 >= ^2 , see ^3
PUSH* ^2
PUSH* ^1
LT
ISZERO
JUMPI ^3

## if ^1 < ^2 , see ^3
PUSH* ^2
PUSH* ^1
LT
JUMPI ^3

## if ^1 > ^2 , see ^3
PUSH* ^2
PUSH* ^1
GT
JUMPI ^3

## if ^1 == ^2 , see ^3
PUSH* ^2
PUSH* ^1
EQ
JUMPI ^3

## if ^1 != ^2 , see ^3
PUSH* ^2
PUSH* ^1
SUB
JUMPI ^3

## let ^1 = ^2
PUSH* ^2
PUSH ^1
MSTORE

## let ^1 get ^2
PUSH* ^2
PUSH ^1
MSTORE

## increment ^1
PUSH 0x01
PUSH* ^1
ADD
PUSH ^1
MSTORE

## decrement ^1
PUSH 0x01
PUSH* ^1
SUB
PUSH ^1
MSTORE

## increment ^1 by ^2
PUSH* ^2
PUSH* ^1
ADD
PUSH ^1
MSTORE

## decrement ^1 by ^2
PUSH* ^2
PUSH* ^1
SUB
PUSH ^1
MSTORE

## let ^1 = ^2 + ^3
PUSH* ^3
PUSH* ^2
ADD
PUSH ^1
MSTORE

## let ^1 = ^2 * ^3
PUSH* ^3
PUSH* ^2
MUL
PUSH ^1
MSTORE

## let ^1 = ^2 - ^3
PUSH* ^3
PUSH* ^2
SUB
PUSH ^1
MSTORE

## let ^1 = ^2 / ^3
PUSH* ^3
PUSH* ^2
DIV
PUSH ^1
MSTORE

## let ^1 = ^2 mod ^3
PUSH* ^3
PUSH* ^2
MOD
PUSH ^1
MSTORE

## let ^1 = ^2 exp ^3
PUSH* ^3
PUSH* ^2
EXP
PUSH ^1
MSTORE

## if it equals to ^1 , see ^2
PUSH* ^1
EQ
JUMPI ^2

## return bytes32 at ^1
PUSH 0x20
PUSH ^1
RETURN

## return uint256 at ^1
PUSH 0x20
PUSH ^1
RETURN

## return bool at ^1
PUSH 0x20
PUSH ^1
RETURN

## return address at ^1
PUSH 0x14
PUSH ^1
PUSH 0x0C
ADD
RETURN

## let stack read record ^1
PUSH ^1
SLOAD

## let ^1 read record ^2
PUSH ^2
SLOAD
PUSH ^1
MSTORE

## read record ^1 into ^2 , ^3
PUSH ^1
SLOAD
DUP1
PUSH 0x80
PUSH 0x02
EXP
SWAP1
DIV
PUSH ^2
MSTORE
PUSH 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
AND
PUSH ^3
MSTORE

## write ^1 , ^2 to record ^3
PUSH* ^1
PUSH 0x80
PUSH 0x02
EXP
MUL
PUSH* ^2
PUSH 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
AND
OR
PUSH ^3
SSTORE

## read record ^1 into ^2 , ^3 , ^4 , ^5
PUSH ^1
SLOAD
DUP1
DUP1
DUP1
PUSH 0xc0
PUSH 0x02
EXP
SWAP1
DIV
PUSH ^2
MSTORE
PUSH 0x80
PUSH 0x02
EXP
SWAP1
DIV
PUSH 0x0000000000000000FFFFFFFFFFFFFFFF
AND
PUSH ^3
MSTORE
PUSH 0x010000000000000000
SWAP1
DIV
PUSH 0x00000000000000000000000000000000FFFFFFFFFFFFFFFF
AND
PUSH ^4
MSTORE
PUSH 0xc0
PUSH 0x02
EXP
DUP1
SWAP2
MUL
DIV
PUSH ^5
MSTORE

## read record ^1 into bytes12 ^2 , address ^3
PUSH ^1
SLOAD
DUP1
PUSH 0xa0
PUSH 0x02
EXP
SWAP1
DIV
PUSH ^2
MSTORE
PUSH 0x60
PUSH 0x02
EXP
DUP1
SWAP2
MUL
DIV
PUSH ^3
MSTORE

## write bytes12 ^1 , address ^2 to record ^3
PUSH* ^1
PUSH 0xa0
PUSH 0x02
EXP
MUL
PUSH* ^2
OR
PUSH ^3
SSTORE

## let ^1 get string argument ^2
PUSH 0x1C
PUSH 0x20
PUSH ^2
MUL
SUB
CALLDATALOAD
PUSH 0x04
ADD
DUP1
CALLDATALOAD
DUP1
PUSH ^1
MSTORE
PUSH 0x20
ADD
SWAP1
PUSH ^1
SWAP1
JUMPDEST loop
PUSH 0x20
ADD
DUP1
SWAP2
PUSH 0x20
ADD
DUP1
SWAP3
CALLDATALOAD
SWAP1
MSTORE
SWAP2
PUSH 0x20
SWAP1
SUB
SWAP2
DUP3
PUSH 0x20
LT
JUMPI loop

## return string at ^1
PUSH ^1
PUSH 0x00
MSTORE
PUSH ^1
DUP1
MLOAD
ADD
PUSH 0x20
ADD
PUSH 0x00
RETURN

## grab string ^1
PUSH ^1
JUMPDEST loop
DUP1
DUP1
SLOAD
SWAP1
MSTORE
PUSH 0x20
ADD
DUP1
SLOAD
JUMPI loop

## write string ^1
PUSH ^1
DUP1
DUP1
MLOAD
JUMPDEST loop
SWAP1
SSTORE
PUSH 0x20
ADD
DUP1
DUP1
MLOAD
DUP1
JUMPI loop

## log ^1
PUSH ^1
SLOAD
PUSH1 0x20
DUP1
LOG0

## log ^1 with topic ^2
PUSH* ^2
PUSH ^1
SLOAD
PUSH1 0x20
DUP1
LOG1

## log ^1 with topics ^2 , ^3
PUSH* ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH1 0x20
DUP1
LOG2

## log ^1 with topics ^2 , ^3 , ^4
PUSH* ^4
PUSH* ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH1 0x20
DUP1
LOG3

## log ^1 with topics ^2 , ^3 , ^4 , ^5
PUSH* ^5
PUSH* ^4
PUSH* ^3
PUSH* ^2
PUSH ^1
SLOAD
PUSH1 0x20
DUP1
LOG4

## let ^1 read record ^2 plus ^3
PUSH* ^2
PUSH ^3
ADD
SLOAD
PUSH ^1
MSTORE

## write ^1 to record ^2 plus ^3
PUSH* ^1
PUSH* ^2
PUSH ^3
ADD
SSTORE

## let stack read record ^1 plus ^2
PUSH* ^1
PUSH ^2
ADD
SLOAD

## write stack to record ^1 plus ^2
PUSH* ^1
PUSH ^2
ADD
SSTORE

## let ^1 get stack value
PUSH ^1
MSTORE

## let ^1 += stack value
PUSH* ^1
ADD

## let ^1 -= stack value
PUSH* ^1
SUB

## push ^1 to stack
PUSH* ^1

## let stack get hash of block ^1
PUSH* ^1
BLOCKHASH

## let stack read record
SLOAD

## write record stack value
SSTORE

## write stack value to record ^1
PUSH ^1
SSTORE

## write ^1 to record stack
PUSH* ^1
SWAP1
SSTORE

## send ^1 to ^2
PUSH 0x00
PUSH 0x00
PUSH 0x00
PUSH 0x00
PUSH* ^1
PUSH* ^2
PUSH 0x64
GAS
SUB
CALL

## set contract input ^1 hash ^2 , size ^3
PUSH ^3
PUSH ^1
MSTORE
PUSH ^2
PUSH 0x20
PUSH ^1
SUB
MSTORE

## call contract address ^1 , input ^2
PUSH 0x20
PUSH 0x00
PUSH 0x04
PUSH 0x04
PUSH ^2
SUB
PUSH 0x00
PUSH ^1
PUSH 0x64
GAS
SUB
CALL

## extract ^1 from method ^2 of contract ^3
PUSH ^2
PUSH ^1
MSTORE
PUSH 0x20
PUSH ^1
PUSH 0x04
PUSH 0x1c
PUSH ^1
ADD
PUSH 0x00
PUSH ^3
PUSH 0x64
GAS
SUB
CALL

## ;end marker
